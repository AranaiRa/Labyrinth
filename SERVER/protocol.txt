Client -> Server

1: HOST_LOBBY
2: JOIN_LOBBY
3: LEAVE_LOBBY
4: START_GAME
5: INPUT

Server -> Client

1:  BROADCAST_LOBBY_LIST
2:  LOBBY_FULL
3:  JOIN_ACCEPT
4:  BROADCAST_LOBBY_STATE (on join or leave)
5:  START_ACCEPT
6:  TIME_LEFT
7:  WORLDSTATE_PLAYERINFO
8:  WORLDSTATE_PLAYERATTACKINFO
9:  WORLDSTATE_SPAWNERINFO
10: WORLDSTATE_ENEMYINFO
11: WORLDSTATE_PICKUPINFO
12: GAMEOVER

12: SERVER_PLAYER_DEATH?
13: SERVER_PLAYER_RESPAWN?

Client -> Server

	HOST_LOBBY
	O 	L 	Type 	Description
	============================
	0	1	uint8	Packet Type

	JOIN_LOBBY
	O 	L 	Type 	Description
	============================
	0	1	uint8 	Packet Type
	1	1	uint8	Room ID

	LEAVE_LOBBY
	O 	L 	Type 	Description
	============================
	0	1	uint8 	Packet Type

	START_GAME
	O 	L 	Type 	Description
	============================
	0	1	uint8 	Packet Type
	1	1	uint8	Room ID
	
	INPUT
	O 	L 	Type 	Description
	============================
	0 	1 	uint8	Packet Type
	1	1	uint8	Input 0QWE PJLR (attacks Q, W, E   JumpPrev, Jump, Left, Right) // bitfield

Server -> Client

	BROADCAST_LOBBY_LIST
	O 	L 	Type 	Description
	============================
	0	1	uint8 	Packet Type
	1	1	uint8	Number of (Nonfull) Rooms
	2n	1	uint8	Room ID
	3n	1	uint8	Available Seats

	LOBBY_FULL (Sent if a player tries to join a room but it becomes full before client notices)
	O 	L 	Type 	Description
	============================
	0	1	uint8 	Packet Type

	JOIN_ACCEPT
	O 	L 	Type 	Description
	============================
	0	1	uint8 	Packet Type
	1	1	uint8	Room ID
	2	1	uint8	Full Seats

	BROADCAST_LOBBY_STATE
	O 	L 	Type 	Description
	============================
	0	1	uint8 	Packet Type
	1	1	uint8	Full Seats (0 for empty, 1 for full) // bitfield

	START_ACCEPT
	O 	L 	Type 	Description
	============================
	0	1	uint8 	Packet Type

	TIME_LEFT
	O 	L 	Type 	Description
	============================
	0	1	uint8 	Packet Type
	1	2	uint16	Seconds Left

	WORLDSTATE_PLAYERINFO
	O 			L 	Type 	Description
	============================
	0			1	uint8 	Packet Type
	1			1	uint8 	Number of Players
	----------------------------
	(2 + n) 	1 	uint8 	Object Index
	(8 + n)		4	float	X Pos
	(12 + n)	4	float	Y Pos

	WORLDSTATE_PLAYERATTACKINFO
	O 			L 	Type 	Description
	============================
	0			1	uint8 	Packet Type
	1			1	uint8 	Number of Attacks
	----------------------------
	(2 + n) 	1 	uint8 	Object Index
	(3 + n)		1	uint8	Attack Type
	(4 + n)		4	float	X Pos
	(8 + n)		4	float	Y Pos

	WORLDSTATE_SPAWNERINFO
	O 			L 	Type 	Description
	============================
	0			1	uint8 	Packet Type
	1			1	uint8 	Number of Attacks
	----------------------------
	(2 + n) 	1 	uint8 	Object Index
	(3 + n)		4	float	X Pos
	(7 + n)		4	float	Y Pos

	WORLD STATE
	O 	L 	Type 	Description
	============================
	0 	4 	uint32 	Protocol ID
	4	1	uint8 	Packet Type
	5	4	uint32	Sequence #
	9	4	uint32	Ack #
	13	4	flags	Ack Bitfield // sends a bitfield representing previous 32 packets and whether or not they have been received
	17 	1	uint8 	Number of Objects
	----------------------------
	0 	1 	uint8 	Object ID (18 + 17*n)
	1	4	float	X Pos (19 + 17*n)
	5	4	float	Y Pos
	9	4	float	X Vel
	13	4	float	Y Vel

